// Mixins


// Button background gradient.
@mixin button_gradient_bg($color-top, $color-bottom) {
	background: #{$color-top};
	background: -webkit-gradient(left top, left bottom, color-stop(0%, #{$color-top}), color-stop(100%, #{$color-bottom}));
	background: -webkit-linear-gradient(top, #{$color-top} 0%, #{$color-bottom} 100%);
	background:    -moz-linear-gradient(top, #{$color-top} 0%, #{$color-bottom} 100%);
	background:     -ms-linear-gradient(top, #{$color-top} 0%, #{$color-bottom} 100%);
	background:      -o-linear-gradient(top, #{$color-top} 0%, #{$color-bottom} 100%);
	background:         linear-gradient(to bottom, #{$color-top} 0%, #{$color-bottom} 100%);
	filter:      progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color-top}', endColorstr='#{$color-bottom}', GradientType=0);
}

// Output vendor properties.
@mixin vendor($property, $value) {
	-webkit-#{$property}: $value;
	   -moz-#{$property}: $value;
		-ms-#{$property}: $value;
		 -o-#{$property}: $value;
			#{$property}: $value;
}

@mixin animation($animate...) {
	$max: length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{ $animations + nth($animate, $i) };

		@if $i < $max {
			$animations: #{ $animations + ', ' };
		}
	}
	-webkit-animation: $animations;
	   -moz-animation: $animations;
		 -o-animation: $animations;
			animation: $animations;
}

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}

@mixin class_abbr_val($abbreviation, $property, $values) {
	// $prop_merge: list_to_str($property);

	/***
	 * #{str_ucfirst(str_replace($property, '-', ' '))}:
	 */

	// @if $property-extended {
	// 	@if type_of($property) == 'list' {
	// 		@each $abbr, $prop in ($abbreviation: $prop_merge) {
	// 			@each $prop-ext in $property-extended {
	// 				@each $value in $values {
	// 					$i: index($values, $value);
	// 					.#{$abbr}-#{$prop-ext}-#{$i} {
	// 						#{nth($property, 1)}-#{$prop-ext}-#{nth($property, 2)}: #{$value};
	// 					}
	// 				}
	// 			}
	// 		}
	// 	}
	// 	@else {

	// 	}
	// }
	// @else {
	@each $abbr, $prop in ($abbreviation: $property) {
		$prop_ucf: str_ucfirst($prop);
		$prop_r: str_replace($prop_ucf, '-', ' ');
		@each $value in $values {
			$value_rename: val_to_class_name($value);
			/**
			 * #{$prop_r} #{$value}:
			 * `.#{$abbr}-#{$value_rename}` `.[size]-#{$abbr}-#{$value_rename}` `.max[size]-#{$abbr}-#{$value_rename}`
			 *
			 *     @example
			 *     div.#{$abbr}-#{$value_rename} Lorem ipsum dolor sit amet, consectetur adipiscing elit.
			 */
			.#{$abbr}-#{$value_rename} {
				#{$prop}: #{$value};
			}
		}

		@each $size, $length in $grid-breakpoints {
			@media (min-width: $length) {
				@each $value in $values {
					.#{$size}-#{$abbr}-#{val_to_class_name($value)} {
						#{$prop}: #{$value};
					}
				}
			}

			@if ($length != 0) {
				@media (max-width: $length - 1) {
					@each $value in $values {
						.max#{$size}-#{$abbr}-#{val_to_class_name($value)} {
							#{$prop}: #{$value};
						}
					}
				}
			}
		}
	}
	// }
}


// abbr-val / d-inline
// prop: val / display: inline

// abbr-prop_ext-# / m-top-4
// prop-prop_ext: val / margin-top: 1rem

// abbr-prop_ext-# / bdr-topright-1
// prop-prop_ext-prop: val / border-top-right-radius: 1px

// @include class(
// 	/* Abbreviation */
// 	'bdr',

// 	/* Property */
// 	(
// 		'border', 
// 		'radius'
// 	),

// 	Property extended
// 	(
// 		'top-right',
// 		'bottom-right',
// 		'bottom-left',
// 		'top-left'
// 	),

// 	/* Values */
// 	$border-radius
// );
