@import '../partials/_all';


/***
 * Gutter:
 */

@each $key, $width in $gutters {
	/**
	 * Gutters width #{$width}:
	 * `.gutters-#{$key}`
	 *
	 *     @example
	 *     div.cont.bd-1.p-y-16
	 *         div.row.gutters-#{$key}
	 *             div.col-8
	 *                 div.bgc-teal-10 &nbsp;
	 *             div.col-4
	 *                 div.bgc-teal-10 &nbsp;
	 */
	.gutters-#{$key} {
		margin-right: -#{$width};
		margin-left: -#{$width};

		&.row {
			> .col,
			> [class*='col-'] {
				padding-right: $width;
				padding-left: $width;
			}
		}
	}

	// Grid gap.
	.gap-#{$key} {
		&[class*='gcols-'] {
			grid-gap: $width;
		}
	}
}

@each $size, $length in $grid-breakpoints {
	@media (min-width: $length) {
		@each $key, $width in $gutters {
			.#{$size}-gutters-#{$key} {
				margin-right: -#{$width};
				margin-left: -#{$width};

				&.row {
					> .col,
					> [class*='col-'] {
						padding-right: $width;
						padding-left: $width;
					}
				}

				// Para la divisi√≥n del contenido en cols.
				@for $i from 1 through $grid-columns {
					&.#{$size}-cols-#{$key} {
						column-gap: $width;
					}
				}
			}

			// Grid gap.
			.#{$size}-gap-#{$key} {
				&[class*='gcols-'] {
					grid-gap: $width;
				}
			}
		}
	}

	@media (max-width: $length - 1) {
		@each $key, $width in $gutters {
			// Grid gap.
			.max#{$size}-gap-#{$key} {
				&[class*='gcols-'] {
					grid-gap: $width;
				}
			}
		}
	}
}

/**
 * Responsive gutters:
 * `.[size]-gutters-[width]` `.max[size]-gutters-[width]`
 *
 *     @example
 *     div.cont.bd-1.p-y-16
 *         div.row.md-gutters-0
 *             div.col-8
 *                 div.bgc-teal-10 &nbsp;
 *             div.col-4
 *                 div.bgc-teal-20 &nbsp;
 */
