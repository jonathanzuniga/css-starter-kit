
@import '../partials/_all';


/***
 * Flex grid:
 */

.row {
	display: flex;
	flex-wrap: wrap;

	margin-right: -#{ $gutter-width };
	margin-left: -#{ $gutter-width };
}

@mixin column {
	display: block;
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 1;
	width: 100%;
}

@mixin gutter {
	padding-right: $gutter-width;
	padding-left: $gutter-width;
}

%column {
	@include column;
	@include gutter;
}

.col {
	@extend %column;
}

@each $size, $length in $grid-breakpoints {

	@for $i from 1 through $grid-columns {

		.col-#{ $i },
		.#{ $size }-col-#{ $i } {
			@extend %column;
		}

	}

}

/**
 * Container:
 * `.cntr` have a max. width of #{ $container-max-width }.
 *
 *     @example
 *     div.cntr.bgc-orchid-10.p-1 &nbsp;
 */

.cntr {
	@include gutter;

	margin-left: auto;
	margin-right: auto;

	width: 100%;
	max-width: $container-max-width;
}

/**
 * Fluid container:
 * `.cntr--fluid`
 *
 *     @example
 *     div.cntr.cntr--fluid.bgc-orchid-10.p-1 &nbsp;
 */

.cntr--fluid {
	max-width: 100%;
}

@for $i from 1 through $grid-columns {

	/**
	 * Column #{ $i } of #{ $grid-columns }:
	 * Remember, wrap any of the `.*col*` classes inside of a `.row` class.
	 *
	 *     @example
	 *     div.cntr.cntr--fluid
	 *         div.row.c-white.ta-center.bgc-orchid-10.p-y-1
	 *             div.col-#{ $i }
	 *                 div.bgc-orchid-20.p-1 #{ $i }
	 */

	.col-#{ $i } {
		$column-width: percentage( $i / $grid-columns );
		flex-basis: $column-width;
		max-width: $column-width;
	}

}

/**
 * Responsive columns:
 * Resize the window to see how grid columns behave on the different breakpoints.
 *
 *     @example
 *     div.cntr.cntr--fluid
 *         div.row.bgc-orchid-10.p-y-1
 *             div.xs-col-4.md-col-6.xl-col-8
 *                 div.bgc-orchid-20 &nbsp;
 *             div.xs-col-8.md-col-6.xl-col-4
 *                 div.bgc-orchid-20 &nbsp;
 */

// Si no se escriben los primeros tamaños de una clase [size]-col-[#], entonces serán 100% de ancho.

[ class*='-col-' ] {
	flex-basis: 100%;
	max-width: 100%;
}

@each $size, $length in $grid-breakpoints {

	@if ( $length != 0 ) {

		@media ( max-width: $length - 1 ) {

			@for $i from 1 through $grid-columns {

				.max#{ $size }-col-#{ $i } {
					$column-width: percentage( $i / $grid-columns );
					flex-basis: $column-width;
					max-width: $column-width;
				}

			}

		}

	}

	@media ( min-width: $length ) {

		@for $i from 1 through $grid-columns {

			.#{ $size }-col-#{ $i } {
				$column-width: percentage( $i / $grid-columns );
				flex-basis: $column-width;
				max-width: $column-width;
			}

		}

	}

}

/**
 * Nested columns:
 *
 *     @example
 *     div.cntr.cntr--fluid
 *         div.row.c-white.ta-center.bgc-orchid-10.p-top-1
 *             div.col-6
 *                 div.bgc-orchid-20.p-1 6
 *             div.col-6
 *                 div.row.bgc-orchid-20.p-y-1
 *                     div.col
 *                         div.bgc-orchid-20.p-1 Nested column
 */
