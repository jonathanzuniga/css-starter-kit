// ==========================================================================
// Functions
// ==========================================================================

// Slightly lighten a color.
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

// Slightly darken a color.
@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

// Generar la lista completa de colores.
@function get-colors-list($colors, $tints) {
	$colors-list: 'Black' #000, 'White' #fff;
	@each $name, $hex, $saturate in $colors {
		@for $tint from 1 to $tints + 2 {
			@if $tint == 1 {
				$colors-list: append(
					$colors-list, 
					'#{$name} #{$tint}' $hex, 
					comma
				);
			} @else {
				$colors-list: append(
					$colors-list, 
					'#{$name} #{$tint}' saturate(
						tint(
							$hex, 
							percentage(1 - ((100 / $tint) / 64))
						), 
						$saturate
					), 
					comma
				);
			}
		}
	}
	@return $colors-list;
}

// Get one color from the list.
@function get-color($color) {
	@each $cp in $color-palette {
		@if nth($cp, 1) == $color {
			@return nth($cp, 2);
		}
	}
	@return unquote('#000');
}

// Hepler. Remove unit from input number.
@function clear-unit($value) {
	@if type-of($value) == 'number' {
		@if (unitless($value)) {
			@return $value;
		} @elseif unit($value) == 'em' {
			@return $value / 1em;
		} @elseif unit($value) == 'rem' {
			@return $value / 1rem;
		} @elseif unit($value) == 'px' {
			@return $value / 1px;
		} @elseif unit($value) == 'pt' {
			@return $value / 1pt;
		}
	} @else {
		@warn 'Not a number value: #{$value}';
		@return $value;
	}
}

// Hepler. Make unit from input number. 
// Replace $value unit to target unit.
@function make-unit($value, $unit: px) {
	$value: clear-unit($value);
	@if type-of($value) == 'number' {
		@if $unit == 'em' {
			@return $value * 1em;
		} @elseif $unit == 'rem' {
			@return $value * 1rem;
		} @elseif $unit == 'px' {
			@return $value * 1px;
		} @elseif $unit == 'pt' {
			@return $value * 1pt;
		}
	} @else {
		@warn 'Not a number value: #{$value}';
		@return $value;
	}
}

// Calculate rems. $value = pixel size. $base = base pixel size
@function px-to-rem($value, $base: $base-font-size) {
	@return ($value / $base) * 1rem;
}

// Calculate ems.
@function px-to-em($value, $base: $base-font-size) {
		@if $value == 0 { @return 0 }
	@return $value / $base + 0em;
}

// Rems to ems.
@function rem-to-em($value, $base: $base-font-size) {
	$value: clear-unit($value);
	$font-size: clear-unit($base);
	$base-font-size: clear-unit($base-font-size);
	@return make-unit($value * $base-font-size / $font-size, em);
}
