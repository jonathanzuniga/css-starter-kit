// Functions


// Slightly lighten a color.
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

// Slightly darken a color.
@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

// Generar la lista completa de colores.
@function get_colors_list($colors, $tints) {
	$colors-list: 'black' #000, 'white' #fff;
	@each $name, $hex in $colors {
		@for $tint from 1 to $tints + 2 {
			@if $tint == 1 {
				$colors-list: append(
					$colors-list, 
					'#{$name} #{$tint}' $hex, 
					comma
				);
			} @else {
				$colors-list: append(
					$colors-list, 
					'#{$name} #{$tint}' tint(
						$hex, 
						percentage(1 - ((100 / $tint) / 64))
					), 
					comma
				);
			}
		}
	}
	@return $colors-list;
}

// Get one color from the list.
@function get_color($color) {
	@each $cp in $color-palette {
		@if nth($cp, 1) == $color {
			@return nth($cp, 2);
		}
	}
	@return unquote('#000');
}

// Hepler. Remove unit from input number.
@function clear_unit($value) {
	@if type_of($value) == 'number' {
		@if (unitless($value)) {
			@return $value;
		} @elseif unit($value) == 'em' {
			@return $value / 1em;
		} @elseif unit($value) == 'rem' {
			@return $value / 1rem;
		} @elseif unit($value) == 'px' {
			@return $value / 1px;
		} @elseif unit($value) == 'pt' {
			@return $value / 1pt;
		}
	} @else {
		@warn 'Not a number value: #{$value}';
		@return $value;
	}
}

// Hepler. Make unit from input number. 
// Replace $value unit to target unit.
@function make_unit($value, $unit: px) {
	$value: clear_unit($value);
	@if type_of($value) == 'number' {
		@if $unit == 'em' {
			@return $value * 1em;
		} @elseif $unit == 'rem' {
			@return $value * 1rem;
		} @elseif $unit == 'px' {
			@return $value * 1px;
		} @elseif $unit == 'pt' {
			@return $value * 1pt;
		}
	} @else {
		@warn 'Not a number value: #{$value}';
		@return $value;
	}
}

// Convert pixels to rems. $value = pixel size. $base = base pixel size.
@function px_to_rem($value, $base: $base-font-size) {
	@return ($value / $base) * 1rem;
}

// Convert rems to pixels.
@function rem_to_px($value) {
	$value: clear_unit($value);
	$base-font-size: clear_unit($base-font-size);
	@return make_unit($value * $base-font-size, px);
}

// Convert pixels to ems.
@function px_to_em($value, $base: $base-font-size) {
	@if $value == 0 { @return 0 }
	@return ($value / $base) + 0em;
}

// Convert ems to pixels.
@function em_to_px($value, $base: $base-font-size) {
	$value: clear_unit($value);
	$font-size: clear_unit($base);
	@return make_unit($value * $font-size, px);
}

// Convert ems to rems.
@function em_to_rem($value, $base: $base-font-size) {
	$value: clear_unit($value);
	$font-size: clear_unit($base);
	$base-font-size	: clear_unit($base-font-size);
	@return make_unit($font-size * $value / $base-font-size, rem);
}

// Convert rems to ems.
@function rem_to_em($value, $base: $base-font-size) {
	$value: clear_unit($value);
	$font-size: clear_unit($base);
	$base-font-size: clear_unit($base-font-size);
	@return make_unit($value * $base-font-size / $font-size, em);
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str_replace($string, $search, $replace: '') {
	$index: str_index($string, $search);

	@if $index {
		@return str_slice($string, 1, $index - 1) + 
			$replace + 
			str_replace(
				str_slice($string, $index + str_length($search)
			), $search, $replace);
	}

	@return $string;
}

// Capitalize string
// @param [string] $string
// @return [string]
@function capitalize($string) {
	@return to_upper_case(str_slice($string, 1, 1)) + str_slice($string, 2);
}

// Alias
@function str_ucfirst($string) {
	@return capitalize($string);
}
